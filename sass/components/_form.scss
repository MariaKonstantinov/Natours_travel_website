.form {
  &__group:not(:last-child) {
    margin-bottom: 2rem;
  }

  &__input {
    font-size: 1.5rem;
    // instead of specifying name of font here, we can set to inherit; input elements don't automatically inherit font-families, so we need to set this property here; same for color value
    font-family: inherit;
    padding: 1.5rem 2rem;
    border-radius: 4px;
    background-color: rgba($color-white, 0.5);
    border: none;
    border-bottom: 3px solid transparent;
    width: 90%;
    display: block;
    color: inherit;
    transition: all 0.3s;

    @include respond(tab-port) {
      width: 100%;
    }

    &:focus {
      // for accessibility reasons we should never set just input:focus, outline:none; but we always need to make visible elements which are focused -> thus, to give a box-shadow and a border-bottom
      outline: none;
      box-shadow: 0 1rem 2rem rgba($color-black, 0.1);
      border-bottom: 3px solid $color-primary;
    }

    // setting form validation - red highlight on the form bottom when input is invalid
    &:focus:invalid {
      border-bottom: 3px solid $color-secondary-dark;
    }

    //   this pseudo element works only in Safari and Chrome
    &::-webkit-input-placeholder {
      color: $color-grey-dark-2;
    }
  }

  &__label {
    font-size: 1.2rem;
    font-weight: 700;
    margin-left: 2rem;
    margin-top: 0.7rem;
    // we set display:block to inline element to be able to use box-model properties on it
    display: block;
    transition: all 0.3s;
  }

  //   input and label are sibling elements (~) -> this is used for general siblings (if there are some elements in between them); but we don't have any elements in between our siblings, so we use (+) adjecent sign; the lable needs to be after the input element in order to be selected by siblings selector
  &__input:placeholder-shown + &__label {
    opacity: 0;
    visibility: hidden;
    transform: translateY(-4rem);
  }

  &__radio-group {
    // we want buttons to be displayed side by side - use float:left
    float: left;
    width: 50%;

    @include respond(tab-port) {
      width: 100%;
      margin-bottom: 2rem;
    }
  }

  //   we don't need the original checkbox button being displayed, so display:none
  &__radio-input {
    display: none;
  }

  &__radio-label {
    font-size: $default-font-size;
    cursor: pointer;
    position: relative;
    padding-left: 4.5rem;
  }

  &__radio-button {
    height: 3rem;
    width: 3rem;
    border: 5px solid $color-primary;
    border-radius: 50%;
    display: inline-block;
    position: absolute;
    left: 0;
    top: -0.4rem;
    // instead of creating this element in html, we use "after" pseudo element in css to create a green dot inside of the button
    &::after {
      content: "";
      display: inline-block;
      height: 1.3rem;
      width: 1.3rem;
      border-radius: 50%;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: $color-primary;
      opacity: 0;
      transition: opacity 0.2s;
    }
  }

  // selecting not a direct sibling element by using (~) selector
  //   as soon as we hit a label element, the radio input becomes checked, so we have this checked pseudo-class available to us, so then we select the sibling one (radio-label), and then the child (radio-button)
  &__radio-input:checked ~ &__radio-label &__radio-button::after {
    opacity: 1;
  }
}
