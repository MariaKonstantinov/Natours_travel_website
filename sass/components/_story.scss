.story {
  width: 75%;
  margin: 0 auto;
  box-shadow: 0 3rem 6rem rgba($color-black, 0.1);
  //   adding transparency (0.6)
  background-color: rgba($color-white, 0.6);
  border-radius: 3px;
  padding: 6rem;
  padding-left: 9rem;
  font-size: $default-font-size;

  transform: skewX(-12deg);

  @include respond(tab-port) {
    width: 100%;
    padding: 4rem;
    padding-left: 7rem;
  }

  @include respond(phone) {
    transform: skewX(0);
  }

  &__shape {
    width: 15rem;
    height: 15rem;
    // float CSS property places element on the left/right side of its container, allowing text and inline elements to wrap around it
    float: left;
    // shape-outside property: hast to be floated, has to have height and width; this property is used to define the shape that the adjacent inline content may wrap around
    shape-outside: circle(50% at 50% 50%);
    // we use clip-path property here to define an element in form of a circle
    clip-path: circle(50% at 50% 50%);
    // best option to add space around the element which is floated - not to use margins, but to use transform property
    transform: translateX(-3rem) skewX(12deg);
    position: relative;

    @include respond(phone) {
      transform: translateX(-3rem) skewX(0);
    }
  }

  // images for responsive design always need a width property specified
  &__img {
    // height 100% because the img is placed inside of a container (&__shape -> story__shape) which has a defined height (width: 15rem), so 100% will be equal to parent (15rem)
    height: 100%;
    // centering image with transform; adding scale so for a better "zoom out" effect in hover
    transform: translateX(-4rem) scale(1);
    // adding transition for a smoother animation
    transition: all 0.5s;
    backface-visibility: hidden;
  }

  &__text {
    transform: skewX(12deg);

    @include respond(phone) {
      transform: skewX(0);
    }
  }

  //   we need this caption to be exactly centered on the top of the image, so we use position:absolute and set the parent conatiner to position:relative (__shape)
  &__caption {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, 20%);
    color: $color-white;
    text-transform: uppercase;
    font-size: 1.7rem;
    text-align: center;
    opacity: 0;
    // adding transition for a smoother animation
    transition: all 0.5s;
    backface-visibility: hidden;
  }

  &:hover &__caption {
    opacity: 1;
    // the initial position was -50% (2d value in () in transform:translate in &__caption), so now on the hover it goes back to its initial state
    transform: translate(-50%, -50%);
  }

  &:hover &__img {
    transform: translateX(-4rem) scale(1);

    // making image blurred and darker (to make it darker - we need to put a value lower than 100%)
    filter: blur(3px) brightness(80%);
  }
}
