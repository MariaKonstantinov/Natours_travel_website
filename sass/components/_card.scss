.card {
  // FUNCTIONALITY
  // defining the perspective property for our card rotation (it needs to be defined on a parent element)
  //   150 rem is a good value for perspective
  perspective: 150rem;
  //   to make it work on Mozilla Firefox browser, we add a prefix
  -moz-perspective: 150rem;
  position: relative;
  height: 52rem;

  &__side {
    height: 52rem;
    color: white;
    font-size: 2rem;
    // transition for our card rotation on hover
    transition: all 0.8s ease;

    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    // so we only see 1 part at 1 time (front or back), and not them both at the same time -> backspace visibility hidden
    // adding prefix for Safari browser
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;

    border-radius: 0.6rem;
    // we set overflow:hidden, so that our image won't distort the border radius property of it;s parent element
    overflow: hidden;
    box-shadow: 0 1.5rem 4rem rgba($color-black, 0.15);

    // FRONT side of card
    &_front {
      background-color: $color-white;
    }

    // BACK side of card
    &_back {
      transform: rotateY(180deg);
      //   card__side_back-1
      &-1 {
        background-image: linear-gradient(
          to right bottom,
          $color-secondary-light,
          $color-secondary-dark
        );
      }

      //   card__side_back-2
      &-2 {
        background-image: linear-gradient(
          to right bottom,
          $color-primary-light,
          $color-primary-dark
        );
      }

      //   card__side_back-3
      &-3 {
        background-image: linear-gradient(
          to right bottom,
          $color-tertiary-light,
          $color-tertiary-dark
        );
      }
    }
  }

  // adding card rotation functionality on hover - across Y, 180 deg
  //   when we hover the card, we want the card__side to transform
  &:hover &__side_front {
    transform: rotateY(-180deg);
  }

  &:hover &__side_back {
    transform: rotateY(0);
  }

  // FRONT SIDE styling
  &__picture {
    background-size: cover;
    height: 23rem;
    // blending 2 images -> background-blend-mode (there are many blend modes, but we choose "screen")
    background-blend-mode: screen;
    // making clip-path available in all browsers
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    // clipping the image
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);

    // card__picture_1
    &_1 {
      // blending 2 images -> background-blend-mode (new property, doesn't work yet in Internet Explorer, only Safari, Firefox and Chrome)
      background-image: linear-gradient(
          to right bottom,
          $color-secondary-light,
          $color-secondary-dark
        ),
        url(../media/nat-5.jpg);
    }

    // card__picture_2
    &_2 {
      background-image: linear-gradient(
          to right bottom,
          $color-primary-light,
          $color-primary-dark
        ),
        url(../media/nat-6.jpg);
    }

    // card__picture_3
    &_3 {
      background-image: linear-gradient(
          to right bottom,
          $color-tertiary-light,
          $color-tertiary-dark
        ),
        url(../media/nat-7.jpg);
    }
  }

  &__heading {
    font-size: 2.8rem;
    font-weight: 300;
    text-transform: uppercase;
    text-align: right;
    color: $color-white;
    // we want heading h4 element to be on the top of our image, so we assign position:absolute to heading
    position: absolute;
    top: 12rem;
    right: 2rem;
    width: 75%;
  }

  &__heading-span {
    padding: 1rem 1.5rem;

    // box-decoration-break:clone - it is a new property, we need a prefix to make it work
    // each box element fragment (heading__span_1) within the element (heading__span) is rendered independently; applying all declarations (in our case it is padding declarations) to all of the box element fragments created by that element (heading__span)
    -webkit-box-decoration-break: clone;
    box-decoration-break: clone;
    // card__heading-span_1
    &_1 {
      background-image: linear-gradient(
        to right bottom,
        rgba($color-secondary-light, 0.85),
        rgba($color-secondary-dark, 0.85)
      );
    }

    // card__heading-span_2
    &_2 {
      background-image: linear-gradient(
        to right bottom,
        rgba($color-primary-light, 0.85),
        rgba($color-primary-dark, 0.85)
      );
    }

    // card__heading-span_3
    &_3 {
      background-image: linear-gradient(
        to right bottom,
        rgba($color-tertiary-light, 0.85),
        rgba($color-tertiary-dark, 0.85)
      );
    }
  }

  &__details {
    padding: 3rem;
  }

  &__list {
    list-style: none;
    width: 80%;
    margin: 0 auto;
  }

  &__list-item {
    text-align: center;
    font-size: 1.5rem;
    padding: 1rem;
    color: $color-grey-dark;

    &:not(:last-child) {
      border-bottom: 1px solid $color-grey-light-2;
    }
  }

  // BACK SIDE styling
  &__cta {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    text-align: center;
  }

  &__price-box {
    text-align: center;
    margin-bottom: 8rem;
    color: $color-white;
  }

  &__price-only {
    font-size: 1.4rem;
    text-transform: uppercase;
  }

  &__price-value {
    font-size: 6rem;
    font-weight: 100;
  }

  // we are writing a big media query at the end because we will be changing a lot the design for specific screen width (900 px)

  // MEDIA QUERY FOR TAB-PORT 900px -------------------------------------------------------------->

  @include respond(tab-port) {
    height: auto;
    border-radius: 0.6rem;
    background-color: $color-white;
    box-shadow: 0 1.5rem 4rem rgba($color-black, 0.15);

    &__side {
      height: auto;

      // we change absolute position to relative as we no longer have 2 sides of a card, we have just 1 side
      position: relative;
      box-shadow: none;

      // BACK side of card
      &_back {
        transform: rotateY(0);
        clip-path: polygon(0 15%, 100% 0, 100% 100%, 0 100%);
      }
    }

    // adding card rotation functionality on hover - across Y, 180 deg
    //   when we hover the card, we want the card__side to transform
    &:hover &__side_front {
      transform: rotateY(0);
    }

    &__details {
      padding: 1rem 3rem;
    }

    // BACK SIDE styling
    &__cta {
      position: relative;
      top: 0%;
      left: 0%;
      transform: translate(0%);
      width: 100%;
      padding: 7rem 4rem 4rem 4rem;
    }

    &__price-box {
      margin-bottom: 3rem;
    }

    &__price-value {
      font-size: 4rem;
    }
  }
}
